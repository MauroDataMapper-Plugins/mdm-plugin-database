import io.spring.gradle.dependencymanagement.internal.DependencyManagementConfigurationContainer
import io.spring.gradle.dependencymanagement.internal.maven.MavenPomResolver
import io.spring.gradle.dependencymanagement.internal.pom.Coordinates
import io.spring.gradle.dependencymanagement.internal.pom.Pom
import io.spring.gradle.dependencymanagement.internal.pom.PomReference
import io.spring.gradle.dependencymanagement.internal.properties.MapPropertySource
import io.spring.gradle.dependencymanagement.internal.properties.ProjectPropertySource

import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenLocal()
        maven {url 'https://jenkins.cs.ox.ac.uk/artifactory/plugins-snapshot'}
        maven {url 'https://jenkins.cs.ox.ac.uk/artifactory/plugins-release'}
        mavenCentral()
    }
    dependencies {
        classpath "ox.softeng.gradle:oxbrcinformatics-gradle-plugins:$oxbrcinformaticsGradlePluginsVersion"
    }
}

plugins {
    id 'groovy'
    id "com.github.hierynomus.license" version "${licenseGradlePluginVersion}"
}

apply plugin: 'ox.softeng.ox-brc-standard'
apply plugin: 'ox.softeng.ox-brc-artifactory'
apply plugin: 'ox.softeng.static-code-analysis'

jar {
    exclude 'logback.groovy'
}

logger.quiet(
    "Available processors: ${Runtime.runtime.availableProcessors()} | " +
    "Max unit test parallel forks: ${Runtime.runtime.availableProcessors().intdiv(2) ?: 1}")

afterEvaluate {

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, TimeUnit.SECONDS
        resolutionStrategy.cacheDynamicVersionsFor 0, TimeUnit.SECONDS
    }
    tasks.withType(JavaExec) {
        systemProperty 'env.logFileName', project.name
    }
}

apply from: 'dependencies.gradle'
apply from: "${projectDir}/gradle/additions/mdm.gradle"
apply from: "${projectDir}/gradle/additions/staticCodeAnalysis.gradle"

controlVersionPropertiesFromMdmBom()

// Pulls the properties from the mdm-bom and applies them to the project
// Theres collisions between the gradle platform and spring dependency plugin which result in the versions we want not being used
void controlVersionPropertiesFromMdmBom() {
    MavenPomResolver pomResolver = new MavenPomResolver(project, new DependencyManagementConfigurationContainer(project))
    Coordinates bomCoords = new Coordinates('uk.ac.ox.softeng.maurodatamapper', 'mdm-bom', mdmCoreVersion)
    PomReference pomReference = new PomReference(bomCoords, new MapPropertySource([:]))
    List<Pom> resolvedPoms = pomResolver.resolvePoms([pomReference], new ProjectPropertySource(project))
    resolvedPoms.first().properties.sort().each {k, v ->
        project.ext[k] = v
    }
}